import interactuable.*
import edificios.*
import escenarios.*
import cosas.*
import detective.*
import direcciones.*
import inventario.*


describe "testGame" {

  method initialize() {
    game.width(38)
    game.height(20)
    detective.escenarioActual().agregarVisualesDeEscenario()
  }
  test "testeo del detective" {
    
    //configurar al detective en la posicion (38, 20)
    detective.position(game.at(16,9)) 
    //verificar que el detective se puede mover hacia abajo
    assert.that(detective.puedeMoverHacia(abajo))
    //mover al detective abajo
    detective.mover(abajo)
    //verificar que el detective se encuentra en la posicion (37,20)
    assert.equals(game.at(16,8), detective.position())

    //configurar al detective en el escenario escolar
    detective.escenarioActual(escenarioEscolar)

    //verificar que el detective de escenario escolar puede cambiar de escenario yendo a la derecha 
    assert.that(detective.escenarioActual().puedeCambiarseDeEscenario(derecha))
    
    //mover al detective arriba
    detective.mover(arriba)

    //verificar que el detective de escenario escolar no puede cambiar de escenario yendo a la 
    assert.notThat(detective.escenarioActual().puedeCambiarseDeEscenario(arriba))

    //configuar al detective en la posicion (37,15)
    detective.position(game.at(37,15))
    //mover al detective a la derecha
    detective.mover(derecha)

    //verificar que el detective cambio de escenario escolar al escenarioCentral
    assert.equals(escenarioCentral, detective.escenarioActual())

    //verificar que la posicion del detective cambio a (0,19)
    assert.equals(game.at(0,15), detective.position())
  }

  test "test del inventario" {
    //cambio de escenario
    //remuevo las visuals del escenario actual
    detective.escenarioActual().removerVisualesDeEscenario()
    //configurar al detective en el escenario escolar
    detective.escenarioActual(escenarioEscolar)
    //agrego las visuals
    detective.escenarioActual().agregarVisualesDeEscenario()

    
    //configurar al detective en la posicion(10,10)
    detective.position(game.at(10,10))

    //verificar que el inventario esta vacio
    assert.equals([], inventario.objetos())

    //verificar que hay un interactuable en el lugar del detective
    assert.that(detective.puedeInteractuar())

    //verificar si el objeto interactuable en posicion es una lupa
    assert.equals(lupa, detective.objetoEnPosicion())

    //configurar para que detective interactue
    detective.interactuar()

    //verificar si detective tiene la lupa en el inventario
    assert.that(detective.tieneItem(lupa))

    //verificar que ya no hay un objeto interactuable en el lugar del detective
    assert.notThat(detective.puedeInteractuar())

  }

  test"test de escenario" {
    //verificar que el escenario escolar tiene como vecino al escenario central en la direccion derecha
    assert.equals(escenarioCentral, escenarioEscolar.escenarioEnDireccion(derecha))

    //verificar que el escenario escolar no puede cargar escenario vecino en la direccion arriba
    assert.throwsException({escenarioEscolar.cargarEscenarioVecinoDeDireccion(arriba)})

    //verificar que el escenario escolar no puede cargar escenario vecino en la direccion arriba
    assert.throwsException({escenarioEscolar.cargarEscenarioVecinoDeDireccion(arriba)})

    //verificar que hay un obstaculo en la posicion (2,16) es el jardin
    assert.that(escenarioEscolar.hayObstaculoEn(game.at(2,16)))

    //verificar que el escenario central tiene como vecino al escenario escolar en la direccion izquierda
    assert.equals(escenarioEscolar, escenarioCentral.escenarioEnDireccion(izquierda))

    //verificar que el escenario central tiene como vecino al escenario super en la direccion derecha
    assert.equals(escenarioMercado, escenarioCentral.escenarioEnDireccion(derecha))

    //verificar que el escenario central tiene como vecino al escenario camping en la direccion arriba
    assert.equals(escenarioCamping, escenarioCentral.escenarioEnDireccion(arriba))

    //verificar que el escenario super tiene como vecino al escenario central en la direccion izquierda
    assert.equals(escenarioCentral, escenarioMercado.escenarioEnDireccion(izquierda))

    //verificar que el escenario camping tiene como vecino al escenario central en la direccion abajo
    assert.equals(escenarioCentral, escenarioCamping.escenarioEnDireccion(abajo))

    //verificar que el escenario camping tiene como vecino al escenario bosque en la direccion arriba
    assert.equals(escenarioBosque, escenarioCamping.escenarioEnDireccion(arriba))

    //verificar que el escenario bosque tiene como vecino al escenario camping en la direccion abajo
    assert.equals(escenarioCamping, escenarioBosque.escenarioEnDireccion(abajo))

  }

  test "test de restricciones" {
    //configurar al detective en el escenario camping
    detective.escenarioActual(escenarioCamping)
    //configurar al detective en la posicion (17,19)
    detective.position(game.at(17,19))
    //verificar que detective no tiene la credencial
    assert.notThat(detective.tieneItem(credencial))
    //intenar mover al detective en la direccion arriba cambiando de escenario al bosque !No puede porque no tiene la credencial
    assert.throwsException({detective.mover(arriba)})
    //verificar que el detective sigue en la misma posicion
    assert.equals(game.at(17,19), detective.position())
    //configurar al detective con la credencial
    inventario.agregar(credencial)
    //verificar que detective tenga la credencial en el inventario
    assert.that(detective.tieneItem(credencial))
    //mover al detective hacia arriba
    detective.mover(arriba)
    //verificar que detective cambio de escenario a escenario bosque 
    assert.equals(escenarioBosque, detective.escenarioActual())


    //ahora que el detective se encuentra en el bosque 
    //configurar a morena (mascota) en la posicion (17,1)
    morena.position(game.at(17,1))
    //intentar que detective interactue con morena !No puede porque le falta los bocadillos y la transportadora vacia!
    assert.throwsException({detective.interactuar()})
    //configurar al detective con la comida
    inventario.agregar(bocadillos)
    //configurar al detective con la transportadora vacia
    inventario.agregar(transportadoraVacia)
    //hacer interactuar al detective
    detective.interactuar()
    //verificar que morena ahora esta en el inventario de detective
    assert.that(detective.tieneItem(morena))
    //verificar que en el inventario de detective ya no tiene mas los bocadillos
    assert.notThat(detective.tieneItem(bocadillos))
    //verificar que en el inventario de detective ya no tiene mas la transportadora vacia
    assert.notThat(detective.tieneItem(transportadoraVacia))
  }
}