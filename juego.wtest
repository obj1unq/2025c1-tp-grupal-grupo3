import interactuable.*
import edificios.*
import escenarios.*
import cosas.*
import detective.*
import direcciones.*
import inventario.*
import vecinos.*


describe "testGame" {

  method initialize() {
    game.width(38)
    game.height(20)
    detective.escenarioActual().agregarVisualesDeEscenario()
  }
  test "testeo del detective" {
    
    //configurar al detective en la posicion (20, 19)
    detective.position(game.at(20, 19)) 
    //verificar que el detective se puede mover hacia abajo
    assert.that(detective.puedeMoverHacia(abajo))
    //mover al detective abajo
    detective.mover(abajo)
    //verificar que el detective se encuentra en la posicion (20, 18)
    assert.equals(game.at(20, 18), detective.position())
    //mover al detective arriba
    detective.mover(arriba)
    //verificar que el detective de escenario central puede cambiar de escenario yendo arriba 
    assert.that(detective.escenarioActual().puedeCambiarseDeEscenario(arriba))
    
    //mover al detective arriba
    detective.mover(arriba)
    //verificar que el detective cambio de escenario central al escenario camping
    assert.equals(escenarioCamping, detective.escenarioActual())

    //configurar al detective en la posicion (37, 0)
    detective.position(game.at(37, 0)) 

    //verificar que el detective de escenario camping no puede cambiar de escenario yendo a la derecha
    assert.notThat(detective.escenarioActual().puedeCambiarseDeEscenario(derecha))

    //verificar que la posicion del detective cambio a (37, 0)
    assert.equals(game.at(37, 0), detective.position())
  }

  test "test del inventario" {
    //cambio de escenario
    //remuevo las visuals del escenario actual
    detective.escenarioActual().removerVisualesDeEscenario()
    //configurar al detective en el escenario escolar
    detective.escenarioActual(escenarioEscolar)
    //agrego las visuals
    detective.escenarioActual().agregarVisualesDeEscenario()

    //configurar al detective en la posicion(23,16)
    detective.position(game.at(23,16))

    //verificar que el inventario solo tiene la lupa
    assert.equals([lupa], inventario.objetos())

    //verificar que hay un interactuable en el lugar del detective
    assert.that(detective.puedeInteractuar())

    //verificar si el objeto interactuable en posicion es una burbujero
    assert.equals(burbujero, detective.objetoEnPosicion())

    //configurar para que detective interactue
    detective.interactuar()

    //verificar si detective tiene la lupa en el inventario
    assert.that(detective.tieneItem(burbujero))

    //verificar que ya no hay un objeto interactuable en el lugar del detective
    assert.notThat(detective.puedeInteractuar())

  }

  test"test de escenario" {
    //verificar que el escenario escolar tiene como vecino al escenario central en la direccion derecha
    assert.equals(escenarioCentral, escenarioEscolar.escenarioEnDireccion(derecha))

    //verificar que el escenario escolar no puede cargar escenario vecino en la direccion arriba
    assert.throwsException({escenarioEscolar.cargarEscenarioVecinoDeDireccion(arriba)})

    //verificar que el escenario escolar no puede cargar escenario vecino en la direccion arriba
    assert.throwsException({escenarioEscolar.cargarEscenarioVecinoDeDireccion(arriba)})

    //verificar que hay un obstaculo en la posicion (2,16) es el jardin
    assert.that(escenarioEscolar.hayObstaculoEn(game.at(2,16)))

    //verificar que el escenario central tiene como vecino al escenario escolar en la direccion izquierda
    assert.equals(escenarioEscolar, escenarioCentral.escenarioEnDireccion(izquierda))

    //verificar que el escenario central tiene como vecino al escenario super en la direccion derecha
    assert.equals(escenarioMercado, escenarioCentral.escenarioEnDireccion(derecha))

    //verificar que el escenario central tiene como vecino al escenario camping en la direccion arriba
    assert.equals(escenarioCamping, escenarioCentral.escenarioEnDireccion(arriba))

    //verificar que el escenario super tiene como vecino al escenario central en la direccion izquierda
    assert.equals(escenarioCentral, escenarioMercado.escenarioEnDireccion(izquierda))

    //verificar que el escenario camping tiene como vecino al escenario central en la direccion abajo
    assert.equals(escenarioCentral, escenarioCamping.escenarioEnDireccion(abajo))

    //verificar que el escenario camping tiene como vecino al escenario bosque en la direccion arriba
    assert.equals(escenarioBosque, escenarioCamping.escenarioEnDireccion(arriba))

    //verificar que el escenario bosque tiene como vecino al escenario camping en la direccion abajo
    assert.equals(escenarioCamping, escenarioBosque.escenarioEnDireccion(abajo))

  }

  test "test de restricciones" {
    //configurar al detective en el escenario camping
    detective.escenarioActual(escenarioCamping)
    //configurar al detective en la posicion (17,19)
    detective.position(game.at(17,19))
    //verificar que detective no tiene la credencial
    assert.notThat(detective.tieneItem(credencial))
    //intenar mover al detective en la direccion arriba cambiando de escenario al bosque !No puede porque no tiene la credencial
    assert.throwsException({detective.mover(arriba)})
    //verificar que el detective sigue en la misma posicion
    assert.equals(game.at(17,19), detective.position())
    //configurar al detective con la credencial
    inventario.agregar(credencial)
    //verificar que detective tenga la credencial en el inventario
    assert.that(detective.tieneItem(credencial))
    //mover al detective hacia arriba
    detective.mover(arriba)
    //verificar que detective cambio de escenario a escenario bosque 
    assert.equals(escenarioBosque, detective.escenarioActual())


    //ahora que el detective se encuentra en el bosque 
    //configurar a morena (mascota) en la posicion (17,1)
    morena.position(game.at(17,1))
    //intentar que detective interactue con morena !No puede porque le falta los bocadillos y la transportadora vacia!
    assert.throwsException({detective.interactuar()})
    //configurar al detective con la comida
    inventario.agregar(bocadillos)
    //configurar al detective con la transportadora vacia
    inventario.agregar(transportadoraVacia)
    //hacer interactuar al detective
    detective.interactuar()
    //verificar que morena ahora esta en el inventario de detective
    assert.that(detective.tieneItem(morena))
    //verificar que en el inventario de detective ya no tiene mas los bocadillos
    assert.notThat(detective.tieneItem(bocadillos))
    //verificar que en el inventario de detective ya no tiene mas la transportadora vacia
    assert.notThat(detective.tieneItem(transportadoraVacia))
  }

   test "El vecino recibe su asset correspondiente"{

    assert.equals("maestraFINAL.png", maestra.image())
    assert.equals("neneJugandoFINAL.png", nene.image())
    assert.equals("grudaFINAL.png", gruda.image())
    assert.equals("abuelitoFinal.png", abuelo.image())
    assert.equals("azulaFINAL.png", azula.image())
    assert.equals("AnaFINAL.png", ana.image())
    assert.equals("abuelitaFINAL.png", abuela.image())
    assert.equals("ivan.png", ivan.image())
    assert.equals("vale.png", vale.image())
    assert.equals("meli.png", meli.image())
    assert.equals("juan.png", juan.image())
    assert.equals("luciaRed.png", fernanda.image())
    assert.equals("guardaBosqueFINAL.png", guardaBosque.image())
    assert.equals("luciaFINAL.png", lucia.image())
    assert.equals("juliRed.png", juli.image())
    assert.equals("rami.png", rami.image())
    assert.equals("scoutRed.png", tomillo.image())
    assert.equals("docRed.png", doc.image())
    assert.equals("policiaMujerFINAL.png", poliMujer.image())
    assert.equals("nino.png", nino.image())
    assert.equals("veteRed.png", vete.image())
    assert.equals("vane.png", vane.image())
    assert.equals("policiaHombreFINAL.png", poliHombre.image())

  }

  test"Finalizacion de mision para el Vecino Especial con mision"{
    //Son pistas: El block de notas, una hoja, los pelos del gato
    // el collar del gato, unos bocadillos para el gato y una transportadora para gatos
    detective.recibirItem(hoja)
    detective.recibirItem(blockNotas)
    detective.recibirItem(transportadoraVacia)
    detective.recibirItem(bocadillos)
    detective.recibirItem(pelos)
    detective.recibirItem(collar)

    assert.equals(6,detective.cantPistas())

  }
}
